// import React from "react";

// const StudentHome = () => {
//     return (
//         <div>
//             <h1 className="text-7xl font-bold underline">Student Home</h1>

//         </div>
//     )
// }

// export default StudentHome;




//  return (
//     <div>
//       <h1 className="text-7xl font-bold underline">Student Home</h1>
//       {loading ? (
//         <p>Loading...</p>
//       ) : (
//         <div className="flex flex-col space-y-8">
//           <div className="flex flex-col space-y-4">
//             <h2 className="text-5xl font-bold">Profile</h2>
//             <div className="flex flex-col space-y-2">
//               <p className="font-bold">Name:</p>
//               <p>{studentData.name}</p>
//             </div>
//             <div className="flex flex-col space-y-2">
//               <p className="font-bold">Email:</p>
//               <p>{studentData.email}</p>
//             </div>
//             <div className="flex flex-col space-y-2">
//               <p className="font-bold">Contact:</p>
//               <p>{studentData.contact}</p>
//             </div>
//           </div>
//           <div className="flex flex-col space-y-4">
//             <h2 className="text-5xl font-bold">Internships</h2>
//             <table className="w-full border-collapse">
//               <thead>
//                 <tr>
//                  <th className="border border-gray-400 px-4 py-2">Company</th>
//                  <th className="border border-gray-400 px-4 py-2">Role</th>
//                  <th className="border border-gray-400 px-4 py-2">Duration</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {studentData.internships.map((internship, index) => (
//                  <tr key={index}>
//                     <td className="border border-gray-400 px-4 py-2">{internship.company}</td>
//                     <td className="border border-gray-400 px-4 py-2">{internship.role}</td>
//                     <td className="border border-gray-400 px-4 py-2">{internship.duration}</td>
//                  </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>
//           <div className="flex flex-col space-y-4">
//             <h2 className="text-5xl font-bold">Achievements</h2>
//             <ul className="list-disc list-inside">
//               {studentData.achievements.map((achievement, index) => (
//                 <li key={index}>{achievement}</li>
//               ))}
//             </ul>
//           </div>
//           <div className="flex flex-col space-y-4">
//             <h2 className="text-5xl font-bold">Results</h2>
//             <table className="w-full border-collapse">
//               <thead>
//                 <tr>
//                  <th className="border border-gray-400 px-4 py-2">Semester</th>
//                  <th className="border border-gray-400 px-4 py-2">Subject</th>
//                  <th className="border border-gray-400 px-4 py-2">Result</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {studentData.results.map((result, index) => (
//                  <tr key={index}>
//                     <td className="border border-gray-400 px-4 py-2">{result.semester}</td>
//                     <td className="border border-gray-400 px-4 py-2">{result.subject}</td>
//                     <td className="border border-gray-400 px-4 py-2">{result.result}</td>
//                  </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>
//         </div>
//       )}
//     </div>
//  );



require("dotenv").config();
const { MongoClient } = require("mongodb");
const express = require("express");
const app = express();
const exceljs = require("exceljs");
const fs = require("fs");
const axios = require("axios"); // Import axios for triggering the process

app.use("/public", express.static("public"));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const PORT = process.env.PORT;
const MONGO_URL = process.env.MONGO_URL; // Update with your MongoDB URI

const client = new MongoClient(MONGO_URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function connectToMongoDB() {
  try {
    await client.connect();
    console.log("Connected to MongoDB");
  } catch (error) {
    console.error("Error connecting to MongoDB:", error);
  }
}

connectToMongoDB();

const volunteersCollection = client.db("Volunteerdb").collection("volunteers");


// Route to process Excel files from a folder
app.post("/process-excel-folder", async (req, res) => {
  try {
    const folderPath = "EXCEL"; // Update with the path to your folder

    // Read all files from the specified folder
    const files = fs.readdirSync(folderPath);

    for (const file of files) {
      if (file.endsWith(".xlsx")) {
        // Check if the file is an Excel file
        const filePath = ${folderPath}/${file};
        const workbook = new exceljs.Workbook();
        await workbook.xlsx.readFile(filePath);

        // Assuming data is on the first worksheet
        const worksheet = workbook.getWorksheet(1);

        const startRow = 2;

        // Bulk operations to update and insert
        const bulkOps = [];

        // Loop through rows within the range (from startRow to 101)
        for (
          let rowNumber = startRow;
          rowNumber <= startRow + 99;
          rowNumber++
        ) {
          const row = worksheet.getRow(rowNumber);

          // Assuming your Excel sheet headers are named consistently
          const excelData = {
            srno: row.getCell("A").value,
            vecno: row.getCell("B").value,
            name: row.getCell("C").value,
            eventcategory: row.getCell("D").value,
            eventname: row.getCell("E").value,
            date: row.getCell("F").value,
            hoursalloted: row.getCell("G").value,
          };

          console.log(
            Processing row ${rowNumber}: ${JSON.stringify(excelData)}
          );

          const existingVolunteerQuery = {
            srno: excelData.srno,
            name: excelData.name,
          };

          const existingVolunteer = await volunteersCollection.findOne(
            existingVolunteerQuery
          );

          const updatedEvent = {
            eventcategory: excelData.eventcategory,
            eventname: excelData.eventname,
            date: excelData.date,
            hoursalloted: excelData.hoursalloted,
          };

          if (existingVolunteer) {
            const eventIndex = existingVolunteer.eventsattained.findIndex(
              (event) => event.eventname === excelData.eventname
            );

            if (eventIndex !== -1) {
              // Check if any fields are different before updating
              const isEventUpdated = !isEqual(
                existingVolunteer.eventsattained[eventIndex],
                updatedEvent
              );

              if (isEventUpdated) {
                console.log(Updating existing event for ${excelData.name});

                // Update all fields if the event exists and has changes
                existingVolunteer.eventsattained[eventIndex] = updatedEvent;

                // Use bulk update
                bulkOps.push({
                  updateOne: {
                    filter: existingVolunteerQuery,
                    update: {
                      $set: {
                        eventsattained: existingVolunteer.eventsattained,
                      },
                    },
                  },
                });

                console.log(Event updated: ${JSON.stringify(updatedEvent)});
              } else {
                console.log(No changes for event ${excelData.eventname} of ${excelData.name});
              }
            } else {
              console.log(Adding new event ${excelData.eventname} for ${excelData.name});

              // Add a new event if it doesn't exist
              existingVolunteer.eventsattained.push(updatedEvent);

              // Use bulk update
              bulkOps.push({
                updateOne: {
                  filter: existingVolunteerQuery,
                  update: {
                    $set: { eventsattained: existingVolunteer.eventsattained },
                  },
                },
              });

              console.log(New event added: ${JSON.stringify(updatedEvent)});
            }
          } else {
            console.log(Adding new volunteer: ${excelData.name});

            // Add a new volunteer if not exists
            const newVolunteer = {
              srno: excelData.srno,
              vecno: excelData.vecno,
              name: excelData.name,
              eventsattained: [
                {
                  eventcategory: excelData.eventcategory,
                  eventname: excelData.eventname,
                  date: excelData.date,
                  hoursalloted: excelData.hoursalloted,
                },
              ],
            };

            // Use bulk insert
            bulkOps.push({
              insertOne: { document: newVolunteer },
            });

            console.log(New volunteer added: ${JSON.stringify(newVolunteer)});
          }
        }

        // Execute bulk operations
        if (bulkOps.length > 0) {
          await volunteersCollection.bulkWrite(bulkOps);
        }

        // Function to check if two objects are equal
        function isEqual(obj1, obj2) {
          return JSON.stringify(obj1) === JSON.stringify(obj2);
        }
      }
    }

    res
      .status(200)
      .send(
        "Data from Excel files processed and stored in MongoDB successfully"
      );
      console.log("Data from Excel files processed and stored in MongoDB successfully");
  } catch (error) {
    console.error("Error processing Excel files:", error);
    res.status(500).send("Internal Server Error");
  }
});

// Route to trigger the process
app.get("/", async (req, res) => {
  try {
    // Trigger the process by sending a POST request
    const apiUrl = http://localhost:${PORT}/process-excel-folder;
    const response = await axios.post(apiUrl);

    res.status(200).send(response.data);
  } catch (error) {
    console.error("Error triggering the process:", error);
    res.status(500).send("Internal Server Error");
  }
});

app.listen(PORT, () => {
  console.log(Server is running on http://localhost:${PORT});
});